Link do filmiku: https://www.youtube.com/watch?v=G5Zk6TRkfNs&feature=youtu.be

W celu zrealizowania projektu u¿yto WPFa.
Opis poszczególnych klas programu wraz z ich metodami:

1) klasa Menu - okno pocz¹tkowe programu. Za pomoc¹ tego okna u¿ytkownik posiada mo¿liwoœæ wyboru trybu rozgrywki, wejœcia w okno opcji oraz zakoñczenia dzia³ania programu. Ca³y layout zosta³ przygotowany za pomoc¹ xamla za wyj¹tkiem t³a okna, które zosta³o dodane za pomoc¹ kodu w konstruktorze klasy. Klasa posiada 4 metody. Ka¿da z nich opisuje co ma siê wydarzyæ po wciœniêciu danego przycisku. Dla przycisków odpowiadaj¹cych trybom rozgrywki oraz dla przycisku opcji tworzony jest nowy obiekt innej klasy. W przypadku trybu jedno lub dwuosobowego jest to obiekt klasy DifficultyLevelWindow, natomiast w przypadku opcji jest to obiekt klasy OptionsWindow.

2) klasa DifficultyLevelWindow - jest to okienko s³u¿¹ce do wyboru poziomu trudnoœci oraz wpisania nicku gracza/graczy. Przyciski oraz napisy zosta³y dodane z poziomu xamla. Okno bêdzie posiadaæ jedno lub dwa pola do wpisania nicków w zale¿noœci od wybranego trybu rozgrywki. Tryb ten jest ustalany poprzez utworzenie obiektu klasy DifficultyLevelWindow z odpowiednim konstruktorem. Klasa zawiera szereg metod s³u¿¹cych do sprawdzania poprawnoœci wprowadzonych przez gracza danych. Kolejno:
a) metoda DifficultyLevelIsSelected - sprawdza czy zosta³ wybrany któryœ z poziomów trudnoœci. Po uruchomieniu okna ¿aden z poziomów nie jest zaznaczony.
b) metoda NameIsGiven - sprawdza czy u¿ytkownik wprowadzi³ nick, który nie sk³ada siê z samych spacji
c) metoda NameIsTooLong - sprawdza czy nick gracza nie przekracza 10 znaków
d) metoda AllDataIsSet - sprawdza czy zosta³y wprowadzone wszystkie niezbêdne dane za pomoc¹ wywo³añ metod a,b,c. Metoda bierze jako argument obiekt klasy TextBox, w który wpisywane bêd¹ nicki graczy. Je¿eli brakuje niektórych informacji to wyœwietlone zostan¹ stosowne powiadomienia.

Po klikniêciu przycisku graj sprawdzana jest poprawnoœc danych przy pomocy zmiennej lokalnej EverythingIsReady i metody AllDataIsSet z odpowiednimi argumentami. Je¿eli wszystko jest gotowe to tworzony jest obiekt klasy Memo z odpowiednim konstruktorem zale¿nym od wybranego wczeœniej trybu gry oraz wybranego poziomu trudnoœci.

3) Klasa Memo - okno, w którym toczy siê rozgrywka. Pola planszy s¹ w rzeczywistoœci obiektami klasy Button dodanymi w podwójnej pêtli przy pomocy kodu. Okno zawiera równie¿ dwa pola dla ka¿dego z graczy, w których bêd¹ wyœwietlane czasy rozgrywki oraz liczba zdobytych par. Czasy rozgrywki s¹ mierzone za pomoc¹ obiektów klasy DispatcherTimer. Gdy trwa tura któregoœ z graczy co sekundê wywo³ywana jest metoda timer_tick, która odpowiednio edytuje pole tekstowe, przy pomocy metody convert_time. Metoda convert_time jest odpowiedzialna za przedstawienie czasu w postaci godziny:minuty:sekundy. W konstruktorze klasy Memo nastêpuje wywo³anie dwóch metod. Pierwsza z nich, FillArrayWithIcons wype³nia listê obiektów klasy Image plikami z rozszerzeniem png, które zosta³y dodane do zasobów projektu w folderze Pictures. Druga metoda, ShuffleImage, wykorzystuje wyra¿enie lambda w celu przemieszania elementów listy. Po klikniêciu na któryœ z przycisków wywo³ywana jest metoda sprawdŸ. Je¿eli jest to pierwsze klikniêcie na przycisk (zmienna checkedFields = 0) podczas ruchu danego u¿ytkownika to ods³aniana jest jego zawartoœæ, któr¹ jest odpowiedni obrazek. Je¿eli jest to drugie klikniêcie to  przycisk jest ods³oniêty, zatrzyzymane zostaj¹ oby dwa timery i nastêpuje oczekiwanie na ostateczne klikniêcie potwierdzaj¹ce zakoñczenie ruchu danego gracza. Klikniêcie to mo¿e byæ dokonane gdziekolwiek na obszarze okna. Po klikniêciu sprawdzane jest czy dwa ods³oniête pola maj¹ taki sam Source, którym jest obiekt klasy Image. Je¿eli tak jest to znikaj¹ one z planszy przy pomocy atrybutu Visibility ustawionego na wartoœæ Visibility.Hidden. Nastêpuje równie¿ sprawdzanie, czy nie nast¹pi³ koniec rozgrywki. Sumowana jest liczba par gracza pierwszego oraz liczba par gracza drugiego. Je¿eli suma par oby dwu graczy jest równa po³owie pola planszy to nast¹pi³ koniec rozgrywki i wyœwietlany jest obiekt klasy MessageBoxResult z informacj¹ o zwyciêzcy i pytaniem, czy nale¿y powtórzyæ rozgrywkê.

4) Klasa OptionsWindow - jest to okienko zawieraj¹ce opcje oraz zasady rozgrywki. Opcje mo¿liwe do zmienienia to w³¹czenie/wy³¹czenie efektów dŸwiêkowych oraz zmiana koloru t³a rozgrywki. Wybory u¿ytkownika s¹ zapisywane w specjalnych zmiennych "efekty" oraz "kolorTla" widocznych w ca³ym projekcie. Odpowiednie okienka bêd¹ odczytywaæ stan zmiennych za pomoc¹ klas pomocniczych BackgroundColor oraz SoundOnClick. 

5) Klasa BackgroundColor - klasa statyczna odpowiedzialna na sztuczne przekonwertowanie zmiennej "kolorTla" typu string na propercje "kolorTlaBrushes". Jest to zabieg s³u¿¹cy póŸniejszemu ³atwiejszemu zmienianiu koloru t³a z poziomu ró¿nych okien.

6) Klasa SoundOnClick - klasa zawieraj¹ca metodê statyczn¹ s³u¿¹c¹ do odgrywania efektów dzwiêkowych. Metoda ta sprawdza czy efekty dŸwiêkowe nie zosta³y wczeœniej wy³¹czone. Wystêpuj¹ 3 typy efektów dŸwiêkowych. Klasa odgrywa dany dŸwiêk w zale¿noœci od podanego jej argumentu. Pliki z rozszerzeniem wav zosta³y dodane do zasobów programu.